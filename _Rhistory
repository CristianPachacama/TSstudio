# } else if (freq == "weekly") {
#   df <- data.frame(dec_left = lubridate::year(ts.obj),
#                    dec_right = lubridate::week(ts.obj), value = as.numeric(ts.obj))
# } else if (freq == "daily") {
#   df <- data.frame(dec_left = lubridate::month(ts.obj),
#                    dec_right = lubridate::day(ts.obj), value = as.numeric(ts.obj))
} else if (freq != "quarterly" & freq != "monthly") {
stop("The frequency of the series is invalid,",
"the function support only 'monthly' or 'quarterly' frequencies")
}
}
p <- plotly::plot_ly(r = df$value, t = df$dec_right,
width = width, height = height) %>%
plotly::add_area(color = factor(df$dec_left, ordered = TRUE)) %>%
plotly::layout(orientation = -90,
autosize = T,
title = title,
margin = list(
l = left,
r = right,
b = bottom,
t = top,
pad = 4
))
return(p)
}
#'  Heatmap Plot for Time Series
#' @export
#' @param ts.obj a univariate time series object of a class "ts", "zoo" or "xts" (support only series with either monthly or quarterly frequency)
#' @param last Subset the data to the last number of observations
#' @description Heatmap plot for time series object by it periodicity (currently support only monthly and quarterly frequency)
#' @examples
#' data(USgas)
#' ts_heatmap(USgas)
# The ts_seasonal function ####
ts_heatmap <- function(ts.obj, last = NULL) {
`%>%` <- magrittr::`%>%`
df <-  p <- obj.name <-  NULL
# Checking the last parameter
if(!base::is.null(last)){
if(!base::is.numeric(last) | last <= 0){
stop("The 'last' parameter is not valid")
} else {
if(last != round(last)){
stop("The 'last' parameter is not integer")
}
}
}
obj.name <- base::deparse(base::substitute(ts.obj))
df <- TSstudio::ts_reshape(ts.obj, type = "wide")
if(!base::is.null(last)){
df <- df[, c(1, (base::ncol(df) - base::ceiling(last / frequency(ts.obj))):ncol(df))]
}
z <- base::as.matrix(df[, -1])
z_text <- base::matrix(NA, nrow = nrow(z), ncol = ncol(z))
time_unit <- base::trimws(base::names(df)[1])
time_unit_up <- base::paste(base::toupper(base::substr(time_unit, 1, 1)),
base::substr(time_unit,2, base::nchar(time_unit)), sep = "")
for(c in 1:base::ncol(z_text)){
for(r in 1:base::nrow(z_text)){
z_text[r, c] <- base::paste('Value: ', z[r,c],
'<br> Year : ', base::colnames(z)[c],
'<br>' ,time_unit_up, ' :', r, sep = " ")
}
}
p <- plotly::plot_ly(z = z, x = colnames(df[,-1]), y = df[,1], type = "heatmap",
hoverinfo = 'text',
text = z_text
) %>% plotly::layout(
title = base::paste("Heatmap -", obj.name, sep = " "),
xaxis = list(title = "Year"),
yaxis = list(title = time_unit_up)
)
return(p)
}
#' 3D Surface Plot for Time Series
#' @export
#' @param ts.obj a univariate time series object of a class "ts", "zoo" or "xts" (support only series with either monthly or quarterly frequency)
#' @description 3D surface plot for time series object by it periodicity (currently support only monthly and quarterly frequency)
#' @examples
#' ts_surface(USgas)
ts_surface <- function(ts.obj) {
`%>%` <- magrittr::`%>%`
df <-  p <- obj.name <-  NULL
obj.name <- base::deparse(base::substitute(ts.obj))
df <- TSstudio::ts_reshape(ts.obj, type = "wide")
z <- base::as.matrix(df[, -1])
z_text <- base::matrix(NA, nrow = nrow(z), ncol = ncol(z))
time_unit <- base::trimws(base::names(df)[1])
time_unit_up <- base::paste(base::toupper(base::substr(time_unit, 1, 1)),
base::substr(time_unit,2, base::nchar(time_unit)), sep = "")
for(c in 1:base::ncol(z_text)){
for(r in 1:base::nrow(z_text)){
z_text[r, c] <- base::paste('Value: ', z[r,c],
'<br> Year : ', base::colnames(z)[c],
'<br>' ,time_unit_up, ' :', r, sep = " ")
}
}
p <- plotly::plot_ly(z = z, x = colnames(df[,-1]), y = df[,1],
hoverinfo = 'text',
text = z_text
) %>%
plotly::add_surface() %>% plotly::layout(
title = base::paste("Surface Plot -", obj.name, sep = " "),
scene = list(xaxis = list(title = "Years"),
yaxis= list(title = time_unit_up),
zaxis= list(title = "Value")
)
)
return(p)
}
ts_heatmap(USgas, last = 36)
# Update data sets
#Total US Vehicle Sales
USVSales <- Quandl::Quandl("FRED/TOTALNSA", collapse="monthly", type = "ts")
devtools::use_data(USVSales, overwrite = TRUE)
# US Monthly Unemployment Rate
USUnRate <- Quandl::Quandl("FRED/UNRATENSA", collapse="monthly", type = "ts")
devtools::use_data(USUnRate, overwrite = TRUE)
# US Natural Gas Consumption
USgas <- Quandl::Quandl("FRED/NATURALGAS", collapse="monthly", type = "ts")
devtools::use_data(USgas, overwrite = TRUE)
# University of Michigan Consumer Survey, Index of Consumer Sentiment
Michigan_CS <- Quandl::Quandl("UMICH/SOC1", collapse="monthly", start_date="1980-01-01", type = "xts")
devtools::use_data(Michigan_CS, overwrite = TRUE)
# Crude Oil Prices: Brent - Europe
EURO_Brent <- Quandl::Quandl("FRED/MCOILBRENTEU", collapse="monthly", type = "zoo")
devtools::use_data(EURO_Brent, overwrite = TRUE)
rm(list = ls())
data("USgas")
data("USVSales")
ts.obj <- USgas
model_test <- function(ts.obj, periods = 6, error = "MAPE", h = 3, models = "awentbh"){
a <- model_list <- model_char <- color_ramp <- NULL
for(s in 1:nchar(models)){
if(!substr(models, s, s) %in% c("a", "w", "e", "n", "t", "b", "h")){
stop("The 'models' argument is not valide")
}
}
if(!base::is.numeric(periods) | periods != base::round(periods) | periods <= 0){
stop("The value of the 'periods' parameters is no valid")
} else {
if((base::length(ts.obj) - periods - h) < 2 * stats::frequency(ts.obj)){
stop("The length of the series is long enough to create a forecast")
}
}
if(!base::is.numeric(h) | h != base::round(h) | h <= 0){
stop("The value of the 'h' parameters is no valid")
} else {
if((base::length(ts.obj) - periods - h) < 2 * stats::frequency(ts.obj)){
stop("The length of the series is long enough to create a forecast")
}
}
if (stats::is.ts(ts.obj)) {
if (stats::is.mts(ts.obj)) {
warning("The 'ts.obj' has multiple columns, only the first column will be plot")
ts.obj <- ts.obj[, 1]
}
}else {
stop("The 'ts.obj' is not a 'ts' class")
}
if(!error %in% c("MAPE", "RMSE")){
warning("The 'error' parameter is invalid, using the default setting - 'MAPE'")
error <- "MAPE"
a <- 10
} else if(error == "MAPE"){
a <- 10
} else if(error == "RMSE"){
a <- 4
}
color_ramp <- RColorBrewer::brewer.pal(base::nchar(models),"Dark2")
model_char <-  base::unlist(base::strsplit(models, split = ""))
if("a" %in% model_char){
model_list <- c(model_list, "AUTO.ARIMA")
}
if("w" %in% model_char){
model_list <- c(model_list, "HoltWinters")
}
if("e" %in% model_char){
model_list <- c(model_list, "ETS")
}
if("n" %in% model_char){
model_list <- c(model_list, "NNETAR")
}
if("t" %in% model_char){
model_list <- c(model_list, "TBATS")
}
if("b" %in% model_char){
model_list <- c(model_list, "BSTS")
}
if("h" %in% model_char){
model_list <- c(model_list, "Hybrid")
}
s <- length(ts.obj) - periods + 1
e <- length(ts.obj)
score_df <- NULL
score_df <- data.frame(matrix(NA, ncol = length(model_list) + 1 , nrow = periods))
names(score_df) <- c("Period", model_list)
score_df$Period <- s:e - s + 1
for(i in s:e){
ts.subset <- train <- test <- NULL
ts.subset <- stats::window(ts.obj, start = time(ts.obj)[1], end = time(ts.obj)[i])
split_ts <- TSstudio::ts_split(ts.subset, sample.out = h)
train <- split_ts$train
test <- split_ts$test
if("a" %in% model_char){
md1 <- forecast::auto.arima(train, stepwise = FALSE)
fc1 <- forecast::forecast(md1, h = h)
score_df$AUTO.ARIMA[i - s + 1] <-  base::round(forecast::accuracy(fc1,test)[a], 2)
}
if("w" %in% model_char){
md2 <- stats::HoltWinters(train, alpha = 0.01, beta = 0.01, gamma = 0.01)
fc2 <- forecast::forecast(md2, h = h)
score_df$HoltWinters[i - s + 1] <- base::round(forecast::accuracy(fc2, test)[a], 2)
}
if("e" %in% model_char){
md3 <- forecast::ets(train)
fc3 <- forecast::forecast(train, h = h)
score_df$ETS[i - s + 1] <-  base::round(forecast::accuracy(fc3, test)[a], 2)
}
if("n" %in% model_char){
md4 <- forecast::nnetar(train)
fc4 <- forecast::forecast(md4, h = h)
score_df$NNETAR[i - s + 1] <-  base::round(forecast::accuracy(fc4, test)[a],2)
}
if("t" %in% model_char){
md5 <- forecast::tbats(train)
fc5 <- forecast::forecast(md5, h = h)
score_df$TBATS[i - s + 1] <-  base::round(forecast::accuracy(fc5, test)[a], 2)
}
if("b" %in% model_char){
train.bs <- base::data.frame(as.numeric(train))
test.bs <- base::data.frame(as.numeric(test))
base::names(train.bs) <- c("obj")
base::names(test.bs) <- c("obj")
ss <- bsts::AddLocalLinearTrend(list(), train.bs$obj)
ss <- bsts::AddSeasonal(ss, train.bs$obj, nseasons = frequency(train))
fit.bsts <- bsts::bsts(train, state.specification = ss,
data = train.bs , niter = 700, ping=0, seed=1234)
burn <- bsts::SuggestBurn(0.1, fit.bsts)
fc.bsts <- stats::predict(fit.bsts, newdata = test.bs, horizon = h,
burn = burn, quantiles = c(.025, .975))
pred <- base::as.numeric(fc.bsts$mean)
if(error == "MAPE"){
score_df$BSTS[i - s + 1] <- base::round(mean(100 * base::abs((pred - test) / pred)), 2)
} else if(error == "RMSE"){
score_df$BSTS[i - s + 1] <- base::round((mean((pred - test)^ 2)) ^ 0.5, 2)
}
}
if("h" %in% model_char){
md6 <- forecastHybrid::hybridModel(train)
fc6 <- forecast::forecast(md6, h = h)
score_df$Hybrid[i - s + 1] <-  base::round(forecast::accuracy(fc6, test)[a], 2)
}
if((i -s + 1) > 1){
p1 <- p2 <- p3 <- NULL
p1 <- plotly::plot_ly(data = score_df)
for(r1 in 2:ncol(score_df)){
p1 <- p1 %>% plotly::add_lines(x = score_df[, 1],
y = score_df[, r1],
name = names(score_df)[r1],
line = list(color = color_ramp[(r1 -1)]))
}
p1 <- p1 %>% plotly::layout(xaxis = list(range = c(min(score_df$Period), max(score_df$Period))))
p2 <- plotly::plot_ly(data = score_df)
for(r2 in 2:base::ncol(score_df)){
p2 <- p2 %>% plotly::add_trace(y = score_df[, r2],
type = "box",
boxpoints = "all",
jitter = 0.3,
pointpos = -1.8,
name =  names(score_df)[r2],
marker = list(color = color_ramp[(r2 -1)]),
line = list(color = color_ramp[(r2 -1)]),
showlegend=F
)
}
p1 <- p1 %>% plotly::layout(title = "Error by Period",
yaxis = list(title = error),
xaxis = list(title = "Period"))
p2 <- p2 %>% plotly::layout(title = "Error Distribution by Model",
yaxis = list(title = error))
p3 <- plotly::subplot(p1, p2, nrows = 2, titleY = TRUE, titleX = TRUE, margin = 0.06)
print(p3)
}
}
}
model_test(ts.obj = USgas, periods = 10, h = 12)
model_test <- function(ts.obj, periods = 6, error = "MAPE", h = 3, models = "awentbh"){
`%>%` <- magrittr::`%>%`
a <- model_list <- model_char <- color_ramp <- NULL
for(s in 1:nchar(models)){
if(!substr(models, s, s) %in% c("a", "w", "e", "n", "t", "b", "h")){
stop("The 'models' argument is not valide")
}
}
if(!base::is.numeric(periods) | periods != base::round(periods) | periods <= 0){
stop("The value of the 'periods' parameters is no valid")
} else {
if((base::length(ts.obj) - periods - h) < 2 * stats::frequency(ts.obj)){
stop("The length of the series is long enough to create a forecast")
}
}
if(!base::is.numeric(h) | h != base::round(h) | h <= 0){
stop("The value of the 'h' parameters is no valid")
} else {
if((base::length(ts.obj) - periods - h) < 2 * stats::frequency(ts.obj)){
stop("The length of the series is long enough to create a forecast")
}
}
if (stats::is.ts(ts.obj)) {
if (stats::is.mts(ts.obj)) {
warning("The 'ts.obj' has multiple columns, only the first column will be plot")
ts.obj <- ts.obj[, 1]
}
}else {
stop("The 'ts.obj' is not a 'ts' class")
}
if(!error %in% c("MAPE", "RMSE")){
warning("The 'error' parameter is invalid, using the default setting - 'MAPE'")
error <- "MAPE"
a <- 10
} else if(error == "MAPE"){
a <- 10
} else if(error == "RMSE"){
a <- 4
}
color_ramp <- RColorBrewer::brewer.pal(base::nchar(models),"Dark2")
model_char <-  base::unlist(base::strsplit(models, split = ""))
if("a" %in% model_char){
model_list <- c(model_list, "AUTO.ARIMA")
}
if("w" %in% model_char){
model_list <- c(model_list, "HoltWinters")
}
if("e" %in% model_char){
model_list <- c(model_list, "ETS")
}
if("n" %in% model_char){
model_list <- c(model_list, "NNETAR")
}
if("t" %in% model_char){
model_list <- c(model_list, "TBATS")
}
if("b" %in% model_char){
model_list <- c(model_list, "BSTS")
}
if("h" %in% model_char){
model_list <- c(model_list, "Hybrid")
}
s <- length(ts.obj) - periods + 1
e <- length(ts.obj)
score_df <- NULL
score_df <- data.frame(matrix(NA, ncol = length(model_list) + 1 , nrow = periods))
names(score_df) <- c("Period", model_list)
score_df$Period <- s:e - s + 1
for(i in s:e){
ts.subset <- train <- test <- NULL
ts.subset <- stats::window(ts.obj, start = time(ts.obj)[1], end = time(ts.obj)[i])
split_ts <- TSstudio::ts_split(ts.subset, sample.out = h)
train <- split_ts$train
test <- split_ts$test
if("a" %in% model_char){
md1 <- forecast::auto.arima(train, stepwise = FALSE)
fc1 <- forecast::forecast(md1, h = h)
score_df$AUTO.ARIMA[i - s + 1] <-  base::round(forecast::accuracy(fc1,test)[a], 2)
}
if("w" %in% model_char){
md2 <- stats::HoltWinters(train, alpha = 0.01, beta = 0.01, gamma = 0.01)
fc2 <- forecast::forecast(md2, h = h)
score_df$HoltWinters[i - s + 1] <- base::round(forecast::accuracy(fc2, test)[a], 2)
}
if("e" %in% model_char){
md3 <- forecast::ets(train)
fc3 <- forecast::forecast(train, h = h)
score_df$ETS[i - s + 1] <-  base::round(forecast::accuracy(fc3, test)[a], 2)
}
if("n" %in% model_char){
md4 <- forecast::nnetar(train)
fc4 <- forecast::forecast(md4, h = h)
score_df$NNETAR[i - s + 1] <-  base::round(forecast::accuracy(fc4, test)[a],2)
}
if("t" %in% model_char){
md5 <- forecast::tbats(train)
fc5 <- forecast::forecast(md5, h = h)
score_df$TBATS[i - s + 1] <-  base::round(forecast::accuracy(fc5, test)[a], 2)
}
if("b" %in% model_char){
train.bs <- base::data.frame(as.numeric(train))
test.bs <- base::data.frame(as.numeric(test))
base::names(train.bs) <- c("obj")
base::names(test.bs) <- c("obj")
ss <- bsts::AddLocalLinearTrend(list(), train.bs$obj)
ss <- bsts::AddSeasonal(ss, train.bs$obj, nseasons = frequency(train))
fit.bsts <- bsts::bsts(train, state.specification = ss,
data = train.bs , niter = 700, ping=0, seed=1234)
burn <- bsts::SuggestBurn(0.1, fit.bsts)
fc.bsts <- stats::predict(fit.bsts, newdata = test.bs, horizon = h,
burn = burn, quantiles = c(.025, .975))
pred <- base::as.numeric(fc.bsts$mean)
if(error == "MAPE"){
score_df$BSTS[i - s + 1] <- base::round(mean(100 * base::abs((pred - test) / pred)), 2)
} else if(error == "RMSE"){
score_df$BSTS[i - s + 1] <- base::round((mean((pred - test)^ 2)) ^ 0.5, 2)
}
}
if("h" %in% model_char){
md6 <- forecastHybrid::hybridModel(train)
fc6 <- forecast::forecast(md6, h = h)
score_df$Hybrid[i - s + 1] <-  base::round(forecast::accuracy(fc6, test)[a], 2)
}
if((i -s + 1) > 1){
p1 <- p2 <- p3 <- NULL
p1 <- plotly::plot_ly(data = score_df)
for(r1 in 2:ncol(score_df)){
p1 <- p1 %>% plotly::add_lines(x = score_df[, 1],
y = score_df[, r1],
name = names(score_df)[r1],
line = list(color = color_ramp[(r1 -1)]))
}
p1 <- p1 %>% plotly::layout(xaxis = list(range = c(min(score_df$Period), max(score_df$Period))))
p2 <- plotly::plot_ly(data = score_df)
for(r2 in 2:base::ncol(score_df)){
p2 <- p2 %>% plotly::add_trace(y = score_df[, r2],
type = "box",
boxpoints = "all",
jitter = 0.3,
pointpos = -1.8,
name =  names(score_df)[r2],
marker = list(color = color_ramp[(r2 -1)]),
line = list(color = color_ramp[(r2 -1)]),
showlegend=F
)
}
p1 <- p1 %>% plotly::layout(title = "Error by Period",
yaxis = list(title = error),
xaxis = list(title = "Period"))
p2 <- p2 %>% plotly::layout(title = "Error Distribution by Model",
yaxis = list(title = error))
p3 <- plotly::subplot(p1, p2, nrows = 2, titleY = TRUE, titleX = TRUE, margin = 0.06)
print(p3)
}
}
}
model_test(ts.obj = USgas, periods = 10, h = 12)
x <- list(1,2,3)
x
str(x)
x_named <- list(a = 1, b = 2, c = 3)
str(x_named)
x_named
x_named$a
df <- data.frame(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
results <- numeric(length(df))
for (i in seq_along(df)) {
results[i] <- mean(df[[i]])
}
df[[1]]
df$a
results
numeric(length(df))
seq_along(df)
?seq_along
vector("numeric", length(df))
library(forecast)
fc <- forecast(auto.arima(USgas), h = 12)
plot(fc)
plot(auto.arima(USgas))
fc
class(fc)
library(forecastHybrid)
?forecastHybrid::hybridModel
?forecast::nnetar
?forecast::tbats
?bsts::bsts
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
# Update data sets
#Total US Vehicle Sales
USVSales <- Quandl::Quandl("FRED/TOTALNSA", collapse="monthly", type = "ts")
devtools::use_data(USVSales, overwrite = TRUE)
# US Monthly Unemployment Rate
USUnRate <- Quandl::Quandl("FRED/UNRATENSA", collapse="monthly", type = "ts")
devtools::use_data(USUnRate, overwrite = TRUE)
# US Natural Gas Consumption
USgas <- Quandl::Quandl("FRED/NATURALGAS", collapse="monthly", type = "ts")
devtools::use_data(USgas, overwrite = TRUE)
# University of Michigan Consumer Survey, Index of Consumer Sentiment
Michigan_CS <- Quandl::Quandl("UMICH/SOC1", collapse="monthly", start_date="1980-01-01", type = "xts")
devtools::use_data(Michigan_CS, overwrite = TRUE)
# Crude Oil Prices: Brent - Europe
EURO_Brent <- Quandl::Quandl("FRED/MCOILBRENTEU", collapse="monthly", type = "zoo")
devtools::use_data(EURO_Brent, overwrite = TRUE)
?read.csv
library(TSstudio)
data("EURO_Brent")
class(EURO_Brent)
data("Michigan_CS")
class(Michigan_CS)
data("USUnRate")
class(USUnRate)
?strptime
lubridate::origin
